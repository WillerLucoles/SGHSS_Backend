// Prisma Schema File
// This file defines the data model for the SGHSS application using Prisma ORM.

// =====================
// 1. Gerador e Fonte de Dados
// =====================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// 2. ENUMs: Tipos pré-definidos para manter a consistência dos dados
// =====================

enum Role {
  PACIENTE
  PROFISSIONAL
  ADMINISTRADOR
}

enum Genero {
  MASCULINO
  FEMININO
  OUTRO
}

enum EstadoCivil {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
  UNIAO_ESTAVEL
}

enum TipoCliente {
  PARTICULAR
  CONVENIO
}

enum TipoQuarto {
  UTI
  PARTICULAR
  ENFERMARIA
  APARTAMENTO
}

enum StatusLeito {
  LIVRE
  OCUPADO
  MANUTENCAO
  HIGIENIZACAO
}

enum StatusConsulta {
  AGENDADA
  REALIZADA
  CANCELADA_PACIENTE
  CANCELADA_PROFISSIONAL
  NAO_COMPARECEU
}

enum StatusInternacao {
  ATIVA
  CONCLUIDA_ALTA
  CONCLUIDA_OBITO
}

// =====================
// 3. Modelos (Tabelas do Banco de Dados)
// =====================

// --- ÁREA DE AUTENTICAÇÃO E USUÁRIOS ---

model Usuario {
  id           String    @id @default(uuid())
  email        String    @unique
  senha        String
  role         Role
  ultimoLogin  DateTime?
  dataCriacao  DateTime  @default(now())
  dataUpdate   DateTime  @updatedAt

  // Relações: Um usuário pode ser um (e apenas um) dos seguintes perfis
  paciente      Paciente?
  profissional  Profissional?
  administrador Administrador?
}

// --- ÁREA DE PACIENTES ---

model Paciente {
  id                        String     @id @default(uuid())
  nome                      String
  cpf                       String     @unique
  dataNascimento            DateTime
  genero                    Genero
  estadoCivil               EstadoCivil?
  telefonePrincipal         String
  telefoneSecundario        String?
  logradouro                String
  numero                    String
  complemento               String?
  bairro                    String
  cidade                    String
  estado                    String
  cep                       String
  nomeContatoEmergencia     String?
  telefoneContatoEmergencia String?
  tipoCliente               TipoCliente @default(PARTICULAR)
  nomeConvenio              String?
  numeroCarteirinha         String?
  planoConvenio             String?
  validadeCarteirinha       DateTime?
  antecedentesPessoais      String?     @db.Text
  medicacoesUsoContinuo     String[]
  alergias                  String[]
  usuario                   Usuario     @relation(fields: [usuarioId], references: [id])
  usuarioId                 String      @unique // Garante que um paciente só pode estar ligado a um usuário
  consultas                 Consultas[]
  internacao                Internacao?
}

// --- ÁREA DE PROFISSIONAIS ---

model Profissional {
  id                        String      @id @default(uuid())
  nome                      String
  cpf                       String      @unique
  crm                       String      @unique
  ufCrm                     String
  especialidadePrincipal    String
  especialidadesSecundarias String[]
  telefone                  String
  usuario                   Usuario     @relation(fields: [usuarioId], references: [id])
  usuarioId                 String      @unique
  gradeHoraria              GradeHoraria[]
  indisponibilidades        Indisponibilidade[]
  consultas                 Consultas[]
  internacoes               Internacao[]
  registrosClinicos         RegistroClinico[]
}

// --- ÁREA DE ADMINISTRADORES ---

model Administrador {
  id        String   @id @default(uuid())
  nome      String
  cargo     String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId String   @unique
}

// --- ÁREA DE AGENDAMENTO E CONSULTAS ---

// Grade de horários fixos do profissional
model GradeHoraria {
  id                       String @id @default(uuid())
  diaDaSemana              Int
  horaInicio               String
  horaFim                  String
  duracaoConsultaMinutos   Int    @default(30)
  profissional             Profissional @relation(fields: [profissionalId], references: [id])
  profissionalId           String
}

// Períodos em que o profissional está indisponível
model Indisponibilidade {
  id             String     @id @default(uuid())
  inicio         DateTime
  fim            DateTime
  motivo         String?
  profissional   Profissional @relation(fields: [profissionalId], references: [id])
  profissionalId String
}

// Consultas agendadas entre pacientes e profissionais
model Consultas {
  id                 String         @id @default(uuid())
  dataHoraInicio     DateTime
  dataHoraFim        DateTime
  statusConsulta     StatusConsulta @default(AGENDADA)
  motivoCancelamento String?
  dataCriacao        DateTime       @default(now())
  dataUpdate         DateTime       @updatedAt
  paciente           Paciente       @relation(fields: [pacienteId], references: [id])
  pacienteId         String
  profissional       Profissional   @relation(fields: [profissionalId], references: [id])
  profissionalId     String
  registroClinico    RegistroClinico?
  @@unique([profissionalId, dataHoraInicio])
}

// --- ÁREA DE INTERNAÇÃO E LEITOS ---

model Quarto {
  id            String   @id @default(uuid())
  numeroQuarto  String   @unique
  tipo          TipoQuarto
  capacidade    Int
  leitos        Leito[]
}

model Leito {
  id                String       @id @default(uuid())
  identificacaoLeito String
  status            StatusLeito  @default(LIVRE)
  quarto            Quarto       @relation(fields: [quartoId], references: [id])
  quartoId          String
  internacao        Internacao?
  @@unique([quartoId, identificacaoLeito]) // A identificação do leito é única por quarto
}

model Internacao {
  id                        String           @id @default(uuid())
  dataEntrada               DateTime
  dataPrevistaAlta          DateTime?
  dataEfetivaAlta           DateTime?
  status                    StatusInternacao @default(ATIVA)
  paciente                  Paciente         @relation(fields: [pacienteId], references: [id])
  pacienteId                String           @unique // Um paciente só pode ter uma internação ativa por vez
  leito                     Leito            @relation(fields: [leitoId], references: [id])
  leitoId                   String           @unique // Um leito só pode ter uma internação por vez
  profissionalResponsavel   Profissional     @relation(fields: [profissionalId], references: [id])
  profissionalId            String
}

// --- ÁREA DE DOCUMENTAÇÃO CLÍNICA (PRONTUÁRIOS) ---

model RegistroClinico {
  id                      String   @id @default(uuid())
  consultaId              String   @unique
  consulta                Consultas @relation(fields: [consultaId], references: [id])
  profissionalId          String
  profissional            Profissional @relation(fields: [profissionalId], references: [id])
  queixa                  String   @db.Text
  exameFisico             String?  @db.Text
  hipotesesDiagnosticas   String?  @db.Text
  conduta                 String?  @db.Text
  observacoesAdicionais   String?  @db.Text
  anexos                  AnexoClinico[]
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
}

model AnexoClinico {
  id                  String          @id @default(uuid())
  nomeArquivo         String
  tipoDocumento       String
  urlArquivoSimulado  String
  registroClinicoId   String
  registroClinico     RegistroClinico @relation(fields: [registroClinicoId], references: [id])
  createdAt           DateTime        @default(now())
}